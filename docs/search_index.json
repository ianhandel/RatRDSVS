[
["index.html", "R @ R(D)SVS R @ R(D)SVS", " R @ R(D)SVS Jill R D MacKay 2020-07-27 R @ R(D)SVS This book will help you get started in R. It’s designed for students (and staff) at R(D)SVS, and is free to use and adapt. "],
["about.html", "1 About this book 1.1 How to use this book", " 1 About this book 1.1 How to use this book You can change the colours on screen by hovering your mouse over the ‘A’ icon at the top left hand side of the page. 1.1.1 As a student in class 1.1.2 As a student learning independently 1.1.3 As a teacher "],
["install.html", "2 Installing R 2.1 Install R 2.2 Install R Studio 2.3 Using the Cloud 2.4 Install R and R Studio - Video Instruction", " 2 Installing R You can skip this chapter if you already have access to R and R Studio, and feel confident navigating between the console and environment panes. To use R on your own PC or laptop, you will need to install two things: R (the programming language) R Studio (a software that makes R easier to run) You can also access R Studio online which can be great if you have a good internet connection, or are on a computer that you don’t have admin rights to. Important: If you want to use R and R Studio on your own device you need to install both. If you prefer watching instructions you can watch the installation videos below. 2.1 Install R R is the programming language we will use. It is freely available, meaning you do not need to pay for R. To install R, you will need to navigate to (or click the link to) the Comprehensive R Archive Network - cran. While there, you want to download R for your operating system (most likely Windows or Mac). Click the link that names your operating system and look for the instructions that say install R for the first time. There will be a link that says something like Download R 4.0.2 for Windows. (The exact version number is not really important yet). After you have installed R, you can check to see if it works, or go straight to installing R Studio 2.2 Install R Studio R Studio is a tool that helps make R more user friendly. It also lets you collect all your data files into ‘projects’. This is very useful for managing your projects and ‘workflows’ (more on that here). To download R Studio follow this link. You want the R Studio Desktop Free version. You will not need to pay for anything to use R as part of your studies at R(D)SVS. When you click the download link above, you will find a button at the bottom of the page to download R Studio Desktop. After you click that button you will be able to choose the version that works for you. Follow the instructions on the page for your operating system. 2.2.1 Quick R Studio Navigation Guide If you have never coded before, R Studio might look very intimidating. In this short section we will walk through the different parts of R Studio. If you find yourself getting lost later in the book, come back here to get a refresher. In Figure 2.1 you will see a view of R Studio as you first open it. There may be some differences, e.g. you will likely have a different R Version number. Figure 2.1: Figure 2.1: R Studio Overview 2.2.1.1 Click on File &gt; New File&gt; R Script Now your screen should look like Figure 2.2. You will have four panes in your window, and each pane can be dragged around or minimised. Note - you want to create a new R Script file, not an R Markdown or R Notebook file. We will do that next. Figure 2.2: Figure 2.2: R Studio Overview with Script File 2.2.1.2 The file pane On the top left hand side of the R Studio window you can view the untitled R Script file you have just opened (Figure 2.3). Here you will see views of your files (mostly R Script files and R Markdown files in this book), and views of your data. Figure 2.3: Figure 2.3: The active file pane 2.2.1.3 The console If you were using plain R (without R Studio) this console window is all you would see. Where you see this &gt; symbol in the console you can type in a simple maths equation. I recommend you type something now, perhaps 2 + 2 When you have finished typing, hit enter on your keyboard and see what the answer is. Type 2 + and then hit enter. What happens? You will need to hit ‘escape’ (‘esc’) on your keyboard to make the &gt; symbol appear again. Hitting ‘enter’ asks R to perform the last command. Because we didn’t tell R what it had to add, it kept waiting to find out what would come next. Figure 2.4: Figure 2.4: The console pane 2.2.1.4 The Environment pane The Environment is shown in Figure 2.5. At the moment, your environment will be empty. We will talk more about what goes here in the environment section of getting started. Figure 2.5: Figure 2.5 The environment pane 2.2.1.5 Files, plots, packages, help and viewer The final pane, shown in Figure 2.6, has five tabs in it by default. These are: Files Think of this like a Windows Explorer window (folder window) on your PC. It will show you all the files in your current folder and may just show your .Rproj file right now. Plots When we start drawing charts they’ll be saved here. Packages Other wonderful people in the R Community write lots of clever code that can be ‘packaged’ up so we can use it. Instead of writing out all the code you need to make a chart, you can use someone’s package instead. We will learn more about these in packages Help If you ever get stuck with a commaned you can type ?command_name to view the command’s documentation. Try it now by type ?summary in the console window. Remember you need to press enter on your keyboard after typing the command. Viewer This tab will show you more complicated things, like if you use R to build an html page (or a book like this one!) Ignore it for now. Figure 2.6: Figure 2.6 File, plot, package and help viewer 2.2.1.6 Customisation Data analysis is fun, and its also personal. You can customise your R Studio to look the way you want it to. Go to Tools &gt; Global Options (Figure 2.7) Figure 2.7: Figure 2.7 Global options And then go to Appearance &gt; Editor Theme to play around and find the colour scheme, font, and R Studio Theme you like best (Figure 3.8) Figure 2.8: Figure 2.8 Global options, themes Personally I like the theme XCode, but it’s your R Studio! You choose the one you like. 2.3 Using the Cloud If you would like to use R Studio Cloud, you will need to create an R Studio account. This can be a whole new account, a google account, or a github account. I would recommend you get a github account (you can jump to read why here). After you have logged in, you can access a workspace. A workspace is like an R Studio Project. As of the 3rd August, 2020, R Studio Cloud is moving out of Beta and will be available to all. You should use the Cloud Free Plan. Again, we do not expect you to buy anything to use R or R Studio. You will have a maximum of 15 projects you can use, and less storage space than using your own device. 2.4 Install R and R Studio - Video Instruction If you prefer to get your resources in video format, there’s an explanation of installing R and R Studio here and using R Studio Cloud here. Please note, these videos are a bit older now so you should expect to see some minor differences, e.g. in version numbers. "],
["start.html", "3 Getting Started 3.1 The Big Secret 3.2 Projects 3.3 Environment 3.4 Packages 3.5 R Markdown vs R Scripts 3.6 Video Introductions", " 3 Getting Started You can skip this chapter if you can: Install and load a package Load data into the environment To use this chapter you will need a working version of R and R Studio. If you can open R Studio and type 2 + 2 in the console you are good to go. If that is confusing, you might need to jump back to installing R Studio and the section navigating R Studio. 3.1 The Big Secret Okay. This is the Big Secret. The thing you will not believe. The most important thing you’ll learn about R. You should copy and paste other peoples’ code. Yes, I’m serious. You should copy and paste and edit code you find online1. In this book you should always be copying bits of code and pasting it into your console. That is why I publish the code alongside it. It took me about ten years of working in R to get over my fear of copying and pasting other peoples’ code. Now I even have a repository of all the code I use over and over so I can copy and paste my own code. Most people will not remember code off the top of their head. This is why we use the help function (remember ?summary) to look at the documentation, and resources like Stack Exchange and Google to help us (more in troubleshooting). 3.1.1 Exercise You might be very skeptical here about how much I want you to be copying code. If you’re not convinced, I suggest you go watch my RStats Crush the amazing David Robinson do one of his Tidy Tuesday screencasts. David Robinson has forgotten more R than I’ll ever learn, and see - he still copies and pastes code. 3.2 Projects I would like to being by creating a new project in R Studio. Open R Studio Go to File &gt; New Project Set up a new project either in an existing directory (folder), or in a new one. Ignore repositories for now. You can call this project anything you like. I recommend something short like ‘start’. A R Project sits inside a folder. Everything inside that folder is part of that R Project. Let’s say you have a folder called: mydata and you create an R Project called analysis. The analysis.Rproj will live inside the mydata folder, and it will ‘see’ all the data, files, and any other folders, you have in mydata. Using R Studio you will get a lot better at ‘directory management’, or knowing where you have saved things. 3.3 Environment In your brand new project you will have a clean environment (refer back to Figure 2.5). Our first exercise is going to explore what the environment really means. 3.3.1 Exercise 3.1 - Environment When we first installed R, you were typing mathematical equations into the console. Let’s remind ourselves of this by running an equation now. In the console, type a long and complicated equation, then hit ‘enter’ when you’re done. 500 + 23 / 91 ## [1] 500.2527 If this was a calculation we often ran, we might want to save the answer. We can do this by using the assign symbol &lt;-. For example, if we type this: x &lt;- 500 + 23 / 91 … you will see that we simply get a new line returned. We don’t get the answer. However, in your environment you will see under the heading ‘Values’, a new thing called x. Enter the following code: x ## [1] 500.2527 R remembers what x is and recalled it. This is useful if we want to do more with x after we’ve calculated it. x /100 ## [1] 5.002527 As well as values, we can ask R to remember a string of text as well. Try this: hello &lt;- &quot;Computers always print &#39;Hello World!&#39; but we never say hello back&quot; print(hello) ## [1] &quot;Computers always print &#39;Hello World!&#39; but we never say hello back&quot; But R is very fussy. What happens if you run this code: print(HELLO) You see, R ise case sensitive, meaning we have to be careful to always type things the same. This is one of the reasons why R Studio is really handy, because you can see what you’ve saved in your environment. Now type this: hello &lt;- &quot;Hello, R!&quot; Take a guess what is going to happen before you type the next line. Were you right? print(hello) ## [1] &quot;Hello, R!&quot; 3.3.2 Exercise 3.2 - Functions 3.3.2.1 The Basic Function A function is a handy way to bundle together some lines of code. David Robinson says that if you run a few lines more than twice you should write a function to do it instead. I’m going to contradict myself now. Functions are really important in R, but I’m not going to ask you to write one anywhere else but in this exercise. Most things in this book I expect you to practice over and over, but functions are useful to understand packages, and that’s why we’re going to talk about them now. Let’s create a function to make R welcome us. Copy and paste this code into a new script file (you may want to save it as your functions example), and then run it. mynameis &lt;- function (name) { print (paste0(&quot;Hello, &quot;, name, &quot;, how are you today?&quot;)) } mynameis (&quot;Jill&quot;) ## [1] &quot;Hello, Jill, how are you today?&quot; You may have noticed that, just like when we were assigning x a value, we now have something in our environment called mynameis. Whenever we type mynameis(\"Jill\") into the console, or execute that line in a script file, R knows it should look to the environment and run the code that’s been bundled up into that package. For example, we could make R welcome us in exactly the same way by typing: print (paste0(&quot;Hello, &quot;, &quot;Jill&quot;, &quot;, how are you today?&quot;)) ## [1] &quot;Hello, Jill, how are you today?&quot; But we would need to change the name every time we wanted welcome a new user. We are lazy, so we use the function to reduce the amount of things we need to change to get a different outcome. Functions make our code more standardised. If we all define the mynameis function at the start of our documentation, we don’t need to worry about accidentally deleting an important character in the code. This is especially important as we like to copy-paste code when we need to. Most scientists will probably not write their own functions, but you should know how they work. 3.4 Packages If people write very good and useful functions, they usually want to share them. They can do this with packages. There are packages for everything, packages for drawing maps, packages for analysing data, packages for suggesting how to analyse your data, packages to give you more data, packages for tidying your data . . . this is one of the reasons we might all have different bits of code. There can be lots of ways to do something. To install a package you need to type install.package(\"package_name\"). But once a package is installed on your computer you need to load it into your library with library(package_name). When you load a package from your library it goes into a special hidden environment where you can access all the functions that the package has written for you. For example, we will make great use of the tidyverse package in this book. You need to start by installing it with: install.packages(&quot;tidyverse&quot;) And when it has finished downloading, you need to type: library(tidyverse) to load it. You’ll see that nothing has appeared in your Environment, but actually you have a whole host of new functions &amp; data you can play with. For example: slice(starwars) ## Warning: `...` is not empty. ## ## We detected these problematic arguments: ## * `needs_dots` ## ## These dots only exist to allow future extensions and should be empty. ## Did you misspecify an argument? ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender homeworld species films vehicles ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lis&gt; &lt;list&gt; ## 1 Luke~ 172 77 blond fair blue 19 male mascu~ Tatooine Human &lt;chr~ &lt;chr [2~ ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ Tatooine Droid &lt;chr~ &lt;chr [0~ ## 3 R2-D2 96 32 &lt;NA&gt; white, bl~ red 33 none mascu~ Naboo Droid &lt;chr~ &lt;chr [0~ ## 4 Dart~ 202 136 none white yellow 41.9 male mascu~ Tatooine Human &lt;chr~ &lt;chr [0~ ## 5 Leia~ 150 49 brown light brown 19 fema~ femin~ Alderaan Human &lt;chr~ &lt;chr [1~ ## 6 Owen~ 178 120 brown, gr~ light blue 52 male mascu~ Tatooine Human &lt;chr~ &lt;chr [0~ ## 7 Beru~ 165 75 brown light blue 47 fema~ femin~ Tatooine Human &lt;chr~ &lt;chr [0~ ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu~ Tatooine Droid &lt;chr~ &lt;chr [0~ ## 9 Bigg~ 183 84 black light brown 24 male mascu~ Tatooine Human &lt;chr~ &lt;chr [0~ ## 10 Obi-~ 182 77 auburn, w~ fair blue-gray 57 male mascu~ Stewjon Human &lt;chr~ &lt;chr [1~ ## # ... with 77 more rows, and 1 more variable: starships &lt;list&gt; Now we have a new dataset (starwars) and a new thing we can do (slice the top of the data). We will talk much more about tidyverse in the data chapter. 3.5 R Markdown vs R Scripts 3.5.1 A video on R Markdown If you would like to watch me using R Markdown, you’re in luck! Theres a video here. 3.6 Video Introductions There is a short introduction to R and R Studio in Video format here: Video 1 Video 2 If you’re reading this as part of your coursework you might be panicking about plagiarism here, after all, we spend a lot of time telling you plagiarism is the worst thing you could ever do and that we’ll use software to detect it. Code is a bit different. We are always trying to find the most efficient way of doing something, and so ideally you would all write code that was identical. Sadly, humans naturally differ in the way the think about problems. My job would be a lot easier if everybody thought the same. If I have set you this book as reading, I can swear to you I will never put your code through a plagiarism checker. That would be very stupid.↩ "],
["data.html", "4 Data 4.1 Exercise 4.2 RMD?", " 4 Data 4.1 Exercise We’re going to read in data and use it 4.2 RMD? "],
["charts.html", "5 Charts 5.1 Data Vis", " 5 Charts 5.1 Data Vis Very important - this is why we start here! "],
["ggplot.html", "6 ggplot2 6.1 Why ggplot? 6.2 Videos", " 6 ggplot2 6.1 Why ggplot? Very scary! 6.2 Videos If you’d rather watch a video about this - you can here! "],
["dataprocessing.html", "7 Data Processing 7.1 Workflows", " 7 Data Processing 7.1 Workflows RMDs important shit "],
["trouble.html", "8 Troubleshooting 8.1 Important skills", " 8 Troubleshooting 8.1 Important skills working independently "],
["statsbasic.html", "9 Basic Statistics 9.1 Descriptive stats", " 9 Basic Statistics 9.1 Descriptive stats means etc "],
["statsfreq.html", "10 Predicting more things 10.1 Linear models 10.2 ANOVA exercise", " 10 Predicting more things 10.1 Linear models 10.2 ANOVA exercise "],
["whatnext.html", "11 What next 11.1 github 11.2 repeatabe code", " 11 What next 11.1 github 11.2 repeatabe code "],
["acks.html", "12 Acknowledgements", " 12 Acknowledgements Rat sketch by Gordon Johnson from Pixabay, Creative Commons 0 license. "]
]
